{"version":3,"sources":["Utility/vars.js","Utility/functions.js","Components/MenuBar.js","Components/Sort.js","Utility/animation.js","Utility/sorting.js","App.js","index.js"],"names":["windowWidth","window","innerWidth","maxNum","innerHeight","maxElems","Math","floor","numElems","getInterval","createNewArr","min","max","list","i","push","ceil","random","MenuBar","Navbar","bg","variant","expand","Brand","href","Toggle","className","aria-controls","Collapse","id","Nav","Item","to","Sort","context","sortingAlgorithm","name","useContext","array","setArray","width","setWidth","elems","setElems","interval","setInterval","useState","setVariant","class","style","height","map","element","idx","uuidv4","length","tooltip","value","onChange","e","parseInt","target","type","onClick","document","getElementsByClassName","item","setAttribute","time","newArr","setTimeout","removeAttribute","compare","arr","isCorrect","backgroundColor","swap","temp","tempNum","innerHTML","coloredSwap","color","setComparisons","number","getElementById","finalize","index","finish","modifyValue","children","toString","isNaN","bubbleSort","l","newL","copy","sorted","comparisons","iteration","mergeSortHelper","auxArray","start","end","mid","firstResult","secondResult","finalResult","k","j","merge","mergeSort","slice","heapify","n","largest","r","result","heapSort","quickSortHelper","low","high","partitionResult","pivot","pivotIndex","partition","nextResult","quickSort","console","log","App","ArrayContext","React","createContext","Fragment","exact","path","ReactDOM","render"],"mappings":"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","file":"static/js/main.d07ca1dd.chunk.js","sourcesContent":["export const windowWidth = window.innerWidth;\r\nexport const windowHeight = window.innerHeight;\r\n\r\nexport const maxNum = 0.4 * windowHeight;\r\n\r\nexport const elemWidth = 15;\r\n\r\nexport const maxElems = Math.floor((0.74 * windowWidth)/(5 + 10) - 1);\r\n\r\nexport const numElems = (0.6 * windowWidth)/(elemWidth + 10) - 1;","import { maxNum } from './vars'\r\n\r\n//https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport const getInterval = (numElems) => {\r\n    return ((1/1.07) ** (numElems - 90)) + 10;\r\n};\r\n\r\n\r\nexport const createNewArr = (numElems) => {\r\n    let list = [];\r\n    for (let i = 0; i < numElems; i++) {\r\n        list.push(getRandomInt(50, maxNum));\r\n    }\r\n    return list; \r\n};\r\n","import React from 'react';\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom'\r\nexport const MenuBar = () => (\r\n  <Navbar bg='dark' variant='dark' expand=\"lg\">\r\n    <Navbar.Brand href=\"\">Sorting Visualizer</Navbar.Brand>\r\n    <Navbar.Toggle className='navbar-hamburger' bg='dark' aria-controls=\"basic-navbar-nav\"/>\r\n    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n      <Nav className=\"mr-auto\">\r\n        <Nav.Item><Link className='nav-link sort-elem' to=\"/\">Bubble Sort</Link></Nav.Item>\r\n        <Nav.Item><Link className='nav-link sort-elem' to=\"/merge-sort\">Merge Sort</Link></Nav.Item>\r\n        <Nav.Item><Link className='nav-link sort-elem' to=\"/quick-sort\">Quick Sort</Link></Nav.Item>\r\n        <Nav.Item><Link className='nav-link sort-elem' to=\"/heap-sort\">Heap Sort</Link></Nav.Item>\r\n      </Nav>\r\n    </Navbar.Collapse>\r\n  </Navbar>\r\n)","import React, {useContext, useState} from 'react'\r\n\r\nimport { createNewArr, getInterval} from '../Utility/functions'\r\nimport { maxNum, windowWidth, maxElems } from '../Utility/vars'\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { MenuBar } from '../Components/MenuBar';\r\n\r\n\r\nfunction Sort({context, sortingAlgorithm, name}) {\r\n\r\n    const {array, setArray, width, setWidth, elems, setElems, interval, setInterval} = useContext(context);\r\n\r\n    const [variant, setVariant] = useState('primary');\r\n\r\n    return (\r\n        <div class='app'>    \r\n            <MenuBar/>\r\n            <h2 className='title'>{name}</h2>\r\n            <div className='wrapper'>\r\n                <div style={{height: maxNum, width: 0}} key={0} className='hidden-element'></div>\r\n                {array.map((element, idx) => {\r\n                    return (\r\n                        <div style={{height: element, width: width}} key={uuidv4()} className='element'>\r\n                            <div className='numberText' key={uuidv4()}>{(width > 50) && element}</div>\r\n                        </div>\r\n                    );\r\n                })}\r\n                <div className='infoWrapper'>\r\n                    <p className='info'>No. of Elements: {array.length};</p>\r\n                    <p className='info'> Comparisons: <span id='comparisons'>0</span>;</p>\r\n                    <RangeSlider tooltip='off' variant={variant} className='slider-bar sort-elem' value={elems} min={7} max={maxElems} onChange={(e) => {\r\n                        setElems(parseInt(e.target.value));\r\n                        setWidth((((0.74 * windowWidth)/((parseInt(e.target.value)) + 1.0)) - 10));\r\n                        setArray(createNewArr(parseInt(e.target.value)));\r\n                        setInterval(getInterval(parseInt(e.target.value)));\r\n                    }}/>\r\n                </div>\r\n            </div>\r\n            \r\n            <button className='sort-button sort-elem' type='button' onClick={() => setArray(createNewArr(elems))}>New Array</button>\r\n\r\n            <button className='sort-button sort-elem' type='button' onClick={() => {\r\n                let elems = document.getElementsByClassName('sort-elem');\r\n                for (let i = 0; i < elems.length; i++) {\r\n                    elems.item(i).setAttribute(\"disabled\", true);\r\n                    setVariant('secondary');\r\n                }\r\n                let {time, newArr} = sortingAlgorithm(array, interval);\r\n                setTimeout(() => {\r\n                    setArray(newArr);\r\n                    elems = document.getElementsByClassName('sort-elem');\r\n                    for (let i = 0; i < elems.length; i++) {\r\n                        elems.item(i).removeAttribute('disabled');\r\n                        setVariant('primary');\r\n                    }\r\n                }, time);\r\n            }}>Sort</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sort\r\n","export const compare = (arr, isCorrect, time, interval) =>  {\r\n    const elems = document.getElementsByClassName('element');\r\n\r\n    if (isCorrect) {\r\n        setTimeout(() => {\r\n            elems[arr[0]].style.backgroundColor = '#f2f0e3';\r\n            elems[arr[1]].style.backgroundColor = '#f2f0e3';\r\n        }, time * interval);\r\n        setTimeout(() => {\r\n            elems[arr[0]].style.backgroundColor = 'green';\r\n            elems[arr[1]].style.backgroundColor = 'green';\r\n        }, (time + 1) * interval);\r\n        setTimeout(() => {\r\n            elems[arr[0]].style.backgroundColor = '#87a9ab';\r\n            elems[arr[1]].style.backgroundColor = '#87a9ab';\r\n        }, (time + 2) * interval);\r\n    }\r\n    else {\r\n        setTimeout(() => {\r\n            elems[arr[0]].style.backgroundColor = '#f2f0e3';\r\n            elems[arr[1]].style.backgroundColor = '#f2f0e3';\r\n        }, time * interval);\r\n        setTimeout(() => {\r\n            elems[arr[0]].style.backgroundColor = 'red';\r\n            elems[arr[1]].style.backgroundColor = 'red';\r\n        }, (time + 1) * interval);\r\n        setTimeout(() => {\r\n            elems[arr[0]].style.backgroundColor = '#87a9ab';\r\n            elems[arr[1]].style.backgroundColor = '#87a9ab';\r\n        }, (time + 2) * interval);\r\n    }\r\n}\r\n\r\nexport const swap = (arr, time, interval) => {\r\n    const elems = document.getElementsByClassName('element');\r\n\r\n    setTimeout(() => {\r\n        let temp = elems[arr[0]].style.height;\r\n        elems[arr[0]].style.height = elems[arr[1]].style.height;\r\n        elems[arr[1]].style.height = temp;\r\n\r\n        let tempNum = elems[arr[0]].innerHTML;\r\n        elems[arr[0]].innerHTML = elems[arr[1]].innerHTML;\r\n        elems[arr[1]].innerHTML = tempNum;\r\n\r\n      }, time * interval);\r\n}\r\n\r\nexport const coloredSwap = (arr, time, interval, color) => {\r\n    const elems = document.getElementsByClassName('element');\r\n\r\n    setTimeout(() => {\r\n            elems[arr[0]].style.backgroundColor = color;\r\n            elems[arr[1]].style.backgroundColor = color;\r\n    }, time * interval);\r\n\r\n    setTimeout(() => {\r\n        let temp = elems[arr[0]].style.height;\r\n        elems[arr[0]].style.height = elems[arr[1]].style.height;\r\n        elems[arr[1]].style.height = temp;\r\n\r\n        let tempNum = elems[arr[0]].innerHTML;\r\n        elems[arr[0]].innerHTML = elems[arr[1]].innerHTML;\r\n        elems[arr[1]].innerHTML = tempNum;\r\n\r\n    }, (time + 1) * interval);\r\n    setTimeout(() => {\r\n        elems[arr[0]].style.backgroundColor = '#87a9ab';\r\n        elems[arr[1]].style.backgroundColor = '#87a9ab';\r\n    }, (time + 2) * interval);\r\n}\r\n\r\nexport const setComparisons = (number, time, interval) => {\r\n    setTimeout(() => {\r\n        document.getElementById('comparisons').innerHTML = number;\r\n    }, time * interval);\r\n}\r\n\r\nexport const finalize = (index, time, interval) => {\r\n    const elems = document.getElementsByClassName('element');\r\n    setTimeout(() => {\r\n        elems[index].style.backgroundColor = '#c60f7b';\r\n    }, time * interval);\r\n}\r\n\r\nexport const finish = (time, interval) => {\r\n    const elems = document.getElementsByClassName('element');\r\n    setTimeout(() => {\r\n        for (let i = 0; i < elems.length; i++) {\r\n            elems[i].style.backgroundColor = 'green';\r\n        }\r\n    }, time * interval);\r\n    setTimeout(() => {\r\n        for (let i = 0; i < elems.length; i++) {\r\n            elems[i].style.backgroundColor = '#87a9ab';\r\n        }\r\n    }, time * interval + 500);\r\n}\r\n\r\nexport const modifyValue = (index, value, time, interval) => {\r\n    const elems = document.getElementsByClassName('element');\r\n    const children = document.getElementsByClassName('numberText');\r\n    setTimeout(() => {\r\n        elems[index].style.backgroundColor = '#f9c80e';\r\n        elems[index].style.height = value.toString() + 'px';\r\n        if (!isNaN(parseInt(children[index].innerHTML))) {\r\n            children[index].innerHTML = value;\r\n        }\r\n    }, time * interval);\r\n    setTimeout(() => {\r\n        elems[index].style.backgroundColor = '#87a9ab';\r\n    }, (time + 1) * interval);\r\n}\r\n\r\n// OLD VERSION\r\n// export const animate = (animationArr) => {\r\n//   const elems = document.getElementsByClassName('element');\r\n\r\n//   for (let i = 0; i < animationArr.length; i++) {\r\n//     if (animationArr[i][2].localeCompare('compare') === 0) {\r\n//       setTimeout(() => {\r\n//         elems[animationArr[i][0]].style.backgroundColor = '#f2f0e3';\r\n//         elems[animationArr[i][1]].style.backgroundColor = '#f2f0e3';\r\n//       }, i * interval);\r\n//       setTimeout(() => {\r\n//         elems[animationArr[i][0]].style.backgroundColor = '#e55934';\r\n//         elems[animationArr[i][1]].style.backgroundColor = '#e55934';\r\n//       }, (i + 1) * interval);\r\n//     }\r\n//     else {\r\n//       setTimeout(() => {\r\n//         let temp = elems[animationArr[i][0]].style.height;\r\n//         elems[animationArr[i][0]].style.height = elems[animationArr[i][1]].style.height;\r\n//         elems[animationArr[i][1]].style.height = temp;\r\n\r\n//         let tempNum = elems[animationArr[i][0]].innerHTML;\r\n//         elems[animationArr[i][0]].innerHTML = elems[animationArr[i][1]].innerHTML;\r\n//         elems[animationArr[i][1]].innerHTML = tempNum;\r\n\r\n//       }, i * interval);\r\n//     }\r\n//   }\r\n//   return (animationArr.length + 1) * interval;\r\n// }","import { compare, modifyValue, swap, coloredSwap, setComparisons, finalize, finish } from './animation';\r\n\r\nconst copy = (l) => {\r\n  let newL = [];\r\n  for (let i = 0; i < l.length; i++) {\r\n    newL.push(l[i]);\r\n  }\r\n  return newL;\r\n}\r\n\r\nexport const bubbleSort = (array, interval) => {\r\n  let newArr = copy(array);\r\n  let sorted = false;\r\n  let time = 0;\r\n  let comparisons = 0;\r\n  let iteration = 1;\r\n  setComparisons(comparisons, time);\r\n  while (!sorted) {\r\n    sorted = true;\r\n    for(let i = 0; i < newArr.length - iteration; i++) {    \r\n      setComparisons(++comparisons, time, interval);\r\n      if (newArr[i] > newArr[i+1]) {\r\n        compare([i, i+1], false, ++time, interval);\r\n        time = time + 1;\r\n        swap([i, i+1], ++time, interval);\r\n        let temp = newArr[i];\r\n        newArr[i] = newArr[i+1];\r\n        newArr[i+1] = temp;\r\n        sorted = false;\r\n      }\r\n      else {\r\n        compare([i, i+1], true, ++time, interval);\r\n        time = time + 2;\r\n      }\r\n    }\r\n    finalize(newArr.length - iteration, time, interval);\r\n    iteration++;\r\n  }\r\n  time = time + 1;\r\n  finish(time, interval);\r\n  time = (time) * interval + 500;\r\n  return {time, newArr};\r\n}\r\n\r\n\r\nconst merge = (array, auxArray, start, mid, end, time, interval, comparisons) => {\r\n\r\n  for (let k = start; k <= end; k++) {\r\n    auxArray[k] = array[k];\r\n  }\r\n\r\n  let k = start; \r\n  let i = start;\r\n  let j = mid + 1;\r\n  while (i <= mid && j <= end) {\r\n    setComparisons(++comparisons, time, interval);\r\n    if (auxArray[i] <= auxArray[j]) {\r\n      compare([i, j], true, ++time, interval);\r\n      time++;\r\n      modifyValue(k, auxArray[i], ++time, interval);\r\n      array[k++] = auxArray[i++];\r\n    }\r\n    else {\r\n      compare([i, j], false, ++time, interval);\r\n      time++;\r\n      modifyValue(k, auxArray[j], ++time, interval);\r\n      array[k++] = auxArray[j++];\r\n    }\r\n  }\r\n  while(i <= mid) {\r\n    modifyValue(k, auxArray[i], ++time, interval);\r\n    array[k++] = auxArray[i++];\r\n  }\r\n  while(j <= end) {\r\n    modifyValue(k, auxArray[j], ++time, interval);\r\n    array[k++] = auxArray[j++];\r\n  }\r\n  return {time, comparisons};\r\n}\r\n\r\n\r\nconst mergeSortHelper = (array, auxArray, interval, start, end, time, comparisons) => {\r\n  if (start === end) {\r\n    return {time, comparisons};\r\n  }\r\n  let mid = Math.floor((start + end)/2);\r\n  let firstResult = mergeSortHelper(array, auxArray, interval, start, mid, time, comparisons);\r\n  let secondResult = mergeSortHelper(array, auxArray, interval, mid + 1, end, firstResult.time, firstResult.comparisons);\r\n  let finalResult = merge(array, auxArray, start, mid, end, secondResult.time, interval, secondResult.comparisons);\r\n  time = finalResult.time;\r\n  comparisons = finalResult.comparisons;\r\n  return {time, comparisons};\r\n}\r\n\r\n\r\nexport const mergeSort = (array, interval) => {\r\n  let comparisons = 0;\r\n  let newArr = array.slice();\r\n  let auxArray = array.slice();\r\n  let result = mergeSortHelper(newArr, auxArray, interval, 0, array.length - 1, 0, comparisons);\r\n  let time = result.time;\r\n  time = time + 1;\r\n  finish(time, interval);\r\n  time = time * interval + 500;\r\n  return {time, newArr};\r\n};\r\n\r\n\r\nconst heapify = (array, n, i, time, interval, comparisons) => {\r\n  let largest = i;\r\n  let l = 2 * i + 1;\r\n  let r = 2 * i + 2;\r\n  \r\n  if ( l < n ) {\r\n    setComparisons(++comparisons, time, interval);\r\n    if ( array[l] > array[largest] ) {\r\n      compare([l, largest], false, ++time, interval);\r\n      time++;\r\n      largest = l;\r\n    }\r\n    else {\r\n      compare([l, largest], true, ++time, interval);\r\n      time++;\r\n    }\r\n  }\r\n  if ( r < n ) {\r\n    setComparisons(++comparisons, time, interval);\r\n    if ( array[r] > array[largest] ) {\r\n      compare([r, largest], false, ++time, interval);\r\n      time++;\r\n      largest = r;\r\n    }\r\n    else {\r\n      compare([r, largest], true, ++time, interval);\r\n      time++;\r\n    }    \r\n  }\r\n  if (largest !== i) {\r\n    let temp = array[i];\r\n    array[i] = array[largest];\r\n    array[largest] = temp;\r\n    swap([i, largest], ++time, interval);\r\n    let result = heapify(array, n, largest, time, interval, comparisons);\r\n    time = result.time;\r\n    comparisons = result.comparisons;\r\n  }\r\n  return {time, comparisons};\r\n}\r\n\r\n\r\nexport const heapSort = (array, interval) => {\r\n  let time = 0;\r\n  let comparisons = 0;\r\n  let n = array.length;\r\n\r\n  let newArr = array.slice();\r\n\r\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\r\n    let result = heapify(newArr, n, i, time, interval, comparisons);\r\n    time = result.time;\r\n    comparisons = result.comparisons;\r\n  }\r\n  for (let i = n - 1; i > 0; i--) {\r\n    let temp = newArr[0];\r\n    newArr[0] = newArr[i];\r\n    newArr[i] = temp;\r\n    swap([0, i], ++time, interval);\r\n    finalize(i, ++time, interval);\r\n    let result = heapify(newArr, i, 0, time, interval, comparisons);\r\n    time = result.time;\r\n    comparisons = result.comparisons;\r\n  }\r\n  finish(++time, interval);\r\n  time = (time + 1) * interval + 500;\r\n  return {time, newArr};\r\n}\r\n\r\n\r\nconst partition = (array, low, high, time, comparisons, interval) => {\r\n  let pivot = array[high];\r\n  let i = low - 1;\r\n  for (let j = low; j < high; j++) {\r\n    setComparisons(++comparisons, time, interval);\r\n    if (array[j] < pivot) {\r\n      compare([j, high], false, ++time, interval);\r\n      time++;\r\n      i++;\r\n      coloredSwap([i, j], ++time, interval, 'yellow');\r\n      time++;\r\n      let temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n    else {\r\n      compare([j, high], true, ++time, interval);\r\n    }\r\n  }\r\n  coloredSwap([i + 1, high], ++time, interval, 'green');\r\n  time++;\r\n  let temp = array[i+1];\r\n  array[i+1] = array[high];\r\n  array[high] = temp;\r\n  let pivotIndex = i + 1;\r\n  return {pivotIndex, time, comparisons};\r\n}\r\n\r\nconst quickSortHelper = (array, low, high, time, comparisons, interval) => {\r\n\r\n  if (low < high) {\r\n    let partitionResult = partition(array, low, high, time, comparisons, interval);\r\n    let result = quickSortHelper(array, low, partitionResult.pivotIndex - 1, partitionResult.time, partitionResult.comparisons, interval);\r\n    let nextResult = quickSortHelper(array, partitionResult.pivotIndex + 1, high, result.time, result.comparisons, interval);\r\n    \r\n    time = nextResult.time;\r\n    comparisons = nextResult.comparisons;\r\n    return{time, comparisons}\r\n  \r\n  }\r\n  return {time, comparisons};\r\n}\r\n\r\nexport const quickSort = (array, interval) => {\r\n  console.log(array);\r\n  let time = 0;\r\n  let comparisons = 0;\r\n  let newArr = array.slice();\r\n  let result = quickSortHelper(newArr, 0, newArr.length - 1, time, comparisons, interval);\r\n  time = result.time;\r\n  finish(++time, interval);\r\n  time = (time + 1) * interval + 500;\r\n  return {time, newArr};\r\n}\r\n\r\n\r\n\r\n\r\n//OLD VERSION\r\n// export const sort = (array) => {\r\n//   let newArr = copy(array);\r\n//   let animationArr = [];\r\n//   let sorted = false;\r\n//   while (!sorted) {\r\n//     sorted = true;\r\n//     for(let i = 0; i < newArr.length - 1; i++) {\r\n//       animationArr.push([i, i+1, 'compare']);\r\n//       if (newArr[i].number > newArr[i+1].number) {\r\n//         animationArr.push([i, i+1, 'swap']);\r\n//         let temp = newArr[i].number;\r\n//         newArr[i].number = newArr[i+1].number;\r\n//         newArr[i+1].number = temp;\r\n//         sorted = false;\r\n//       }\r\n//     }\r\n//   }\r\n//   return {animationArr, newArr};\r\n// }","import React, { useState } from 'react';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Sort from './Components/Sort'\n\nimport { bubbleSort, mergeSort, heapSort, quickSort } from './Utility/sorting'\n\nimport { createNewArr, getInterval } from './Utility/functions'\n\nimport { elemWidth , numElems } from './Utility/vars'\n\n\n\nfunction App() {\n\n  let list = createNewArr(numElems);\n  const [array, setArray] = useState(list);\n  const [width, setWidth] = useState(elemWidth);\n  const [elems, setElems] = useState(numElems);\n  const [interval, setInterval] = useState(getInterval(elems));\n  const ArrayContext = React.createContext({array, setArray, width, setWidth, elems, setElems, interval, setInterval});\n\n  return (\n    <React.Fragment>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\">\n              <Sort context={ArrayContext} sortingAlgorithm={bubbleSort} name={'Bubble Sort'}/>\n            </Route>\n            <Route path=\"/merge-sort\">\n              <Sort context={ArrayContext} sortingAlgorithm={mergeSort} name={'Merge Sort'}/>\n            </Route>\n            <Route path=\"/quick-sort\">\n              <Sort context={ArrayContext} sortingAlgorithm={quickSort} name={'Quick Sort'}/>\n            </Route>\n            <Route path=\"/heap-sort\">\n              <Sort context={ArrayContext} sortingAlgorithm={heapSort} name={'Heap Sort'}/>\n            </Route>\n          </Switch>\n        </Router>\n    </React.Fragment>\n  );\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}